// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRepoServiceClient is the client API for UserRepoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRepoServiceClient interface {
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRes, error)
	GetUserById(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserRes, error)
	UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error)
	GetByCondition(ctx context.Context, in *ConditionReq, opts ...grpc.CallOption) (*UserRes, error)
}

type userRepoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRepoServiceClient(cc grpc.ClientConnInterface) UserRepoServiceClient {
	return &userRepoServiceClient{cc}
}

func (c *userRepoServiceClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRes, error) {
	out := new(AddUserRes)
	err := c.cc.Invoke(ctx, "/v1.UserRepoService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoServiceClient) GetUserById(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := c.cc.Invoke(ctx, "/v1.UserRepoService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoServiceClient) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error) {
	out := new(UserListRes)
	err := c.cc.Invoke(ctx, "/v1.UserRepoService/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoServiceClient) GetByCondition(ctx context.Context, in *ConditionReq, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := c.cc.Invoke(ctx, "/v1.UserRepoService/GetByCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRepoServiceServer is the server API for UserRepoService service.
// All implementations must embed UnimplementedUserRepoServiceServer
// for forward compatibility
type UserRepoServiceServer interface {
	AddUser(context.Context, *AddUserReq) (*AddUserRes, error)
	GetUserById(context.Context, *UserIdReq) (*UserRes, error)
	UserList(context.Context, *UserListReq) (*UserListRes, error)
	GetByCondition(context.Context, *ConditionReq) (*UserRes, error)
	mustEmbedUnimplementedUserRepoServiceServer()
}

// UnimplementedUserRepoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRepoServiceServer struct {
}

func (UnimplementedUserRepoServiceServer) AddUser(context.Context, *AddUserReq) (*AddUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserRepoServiceServer) GetUserById(context.Context, *UserIdReq) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserRepoServiceServer) UserList(context.Context, *UserListReq) (*UserListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedUserRepoServiceServer) GetByCondition(context.Context, *ConditionReq) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCondition not implemented")
}
func (UnimplementedUserRepoServiceServer) mustEmbedUnimplementedUserRepoServiceServer() {}

// UnsafeUserRepoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRepoServiceServer will
// result in compilation errors.
type UnsafeUserRepoServiceServer interface {
	mustEmbedUnimplementedUserRepoServiceServer()
}

func RegisterUserRepoServiceServer(s grpc.ServiceRegistrar, srv UserRepoServiceServer) {
	s.RegisterService(&UserRepoService_ServiceDesc, srv)
}

func _UserRepoService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRepoService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServiceServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepoService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRepoService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServiceServer).GetUserById(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepoService_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServiceServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRepoService/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServiceServer).UserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepoService_GetByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServiceServer).GetByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRepoService/GetByCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServiceServer).GetByCondition(ctx, req.(*ConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRepoService_ServiceDesc is the grpc.ServiceDesc for UserRepoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRepoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UserRepoService",
	HandlerType: (*UserRepoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserRepoService_AddUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserRepoService_GetUserById_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _UserRepoService_UserList_Handler,
		},
		{
			MethodName: "GetByCondition",
			Handler:    _UserRepoService_GetByCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/user_repo.proto",
}
